channelInTree='inclusive'
bdtType = "evtLevelSUM_TTH"

def trainVars(all):
        if all==True :return [
    "avg_dr_jet", "ptmiss",  "htmiss", "evtWeight", "mvaOutput_Hj_tagger",
    "mTauTauVis", "mTauTau_SVFit", "cosThetaS_hadTau",
    "mTauTauVis2", "mTauTau2_SVFit", "cosThetaS_hadTau2",
    "mbb_loose", "mbb_medium", "max_dr_jet", "met_LD",
    "jet1_pt", "jet1_eta", "jet1_phi", "jet1_mass",
    "jet2_pt", "jet2_eta", "jet2_phi", "jet2_mass",
    "jet3_pt", "jet3_eta", "jet3_phi", "jet3_mass",
    "jet4_pt", "jet4_eta", "jet4_phi", "jet4_mass",
    "lep1_conept", "lep1_mT", "lep1_min_dr_jet", "lep1_pt", "lep1_eta", "lep1_phi", "lep1_mass",
    "lep2_conept", "lep2_mT", "lep2_min_dr_jet", "lep2_pt", "lep2_eta", "lep2_phi", "lep2_mass",
    "lep3_conept", "lep3_mT", "lep3_min_dr_jet", "lep3_pt", "lep3_eta", "lep3_phi", "lep3_mass",
    "lep4_conept", "lep4_mT", "lep4_min_dr_jet", "lep4_pt", "lep4_eta", "lep4_phi", "lep4_mass",
    "tau1_min_dr_jet", "tau1_min_dr_lep", "tau1_pt",  "tau1_eta", "tau1_phi", "tau1_mass",
    "tau2_min_dr_jet", "tau2_min_dr_lep", "tau2_pt",  "tau2_eta", "tau2_phi", "tau2_mass",
    "tau3_min_dr_jet", "tau3_min_dr_lep", "tau3_pt",  "tau3_eta", "tau3_phi", "tau3_mass",
    "tau4_min_dr_jet", "tau4_min_dr_lep", "tau4_pt",  "tau4_eta", "tau4_phi", "tau4_mass",
    "DijetForward_mass",
    "jetForward1_pt", "jetForward1_eta", "jetForward1_phi", "jetForward1_mass",
    "jetForward2_pt", "jetForward2_eta", "jetForward2_phi", "jetForward2_mass",
    "res-HTT_CSVsort4rd", "res-HTT_CSVsort4rd_2",
    "HadTop_pt_CSVsort4rd", "HadTop_pt_CSVsort4rd_2", "HadTop_eta_CSVsort4rd",
    "genTopPt_CSVsort4rd", "genTopPt_CSVsort4rd_2",
    "HTTv2_lead_pt", "minDR_HTTv2_lep", "minDR_HTTv2subjets_lep",
    "HTT_boosted", "genTopPt_boosted", "HadTop_pt_boosted",
    "HTT_semi_boosted_fromAK8",
    "genTopPt_semi_boosted_fromAK8", "HadTop_pt_semi_boosted_fromAK8",
    "minDR_AK8_lep", "minDR_AK8subjets_lep",
    "nJet", "nJetForward", "nBJetLoose", "nBJetMedium", "nElectron",
    "nLepton", "nTau",
    "lep_match_jet", "lep_match_lep", "tau_match_jet", "tau_match_tau",
    #"selTrigger_1e",  "selTrigger_2e", "selTrigger_3e",
    #"selTrigger_1mu", "selTrigger_2mu", "selTrigger_3mu",
    #"selTrigger_1e1mu", "selTrigger_1e2mu","selTrigger_2e1mu",
    #"selTrigger_1e1tau", "selTrigger_1mu1tau", "selTrigger_2tau",
    "isCharge_hadTau_OS", "isCharge_Lepton_OS",
    "sum_lep_charge", "sum_tau_charge",
    "pass_ttH", #"pass_bb",
    "pass_2lss_0tau", "pass_3l_0tau", "pass_4l_0tau",
    "pass_ttZctrl", "pass_ttWctrl", "pass_WZctrl", "pass_ZZctrl",
    "pass_1l_2tau",  "pass_2lss_1tau", "pass_2los_1tau", "pass_3l_1tau", "pass_2l_2tau",
    "pass_1l_1tau", "pass_1l_3tau", "pass_0l_4tau", "pass_2los_0tau", "pass_0l_3tau", "pass_0l_2tau",
    "hadtruth", "hadtruth_2" , "hadtruth_boosted", "hadtruth_semi_boosted_fromAK8",
    "nHTTv2", "N_jetAK8",
    "failsZbosonMassVeto", "failsLowMassVeto", "failsHtoZZVeto",
    ###
    "bWj1Wj2_isGenMatched_CSVsort4rd", "bWj1Wj2_isGenMatched_CSVsort4rd_2",
    "bWj1Wj2_isGenMatched_boosted", "bWj1Wj2_isGenMatched_semi_boosted_fromAK8",
    "resolved_and_semi_AK8", "boosted_and_semi_AK8", "resolved_and_boosted",
    "weight_fakeRate", "weight_data_to_MC_correction", "weight_data_to_MC_correction_hadTau"
		]
